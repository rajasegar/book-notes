* Writing Solid code
  Author: Steve Maguire


- the growing complexity of software
- The key to writing bug-free code is to become more aware of how bugs come about
- *How could I have prevented this bug?*
- *How could I automatically detected this bug?*
- cultivate awareness
- Bugs caused by:
  - bad function arguments
  - accidental use of undefined behaviour
  - mistaken assumptions by other programmers
  - impossible conditions that nevertheless somehow show up
- Ridding your code of bugs
- Integrity checks can also be used to eliminate rare behavior
- use unambiguous data types
- avoid parasitic functions
- Without the proper attitude and a set of good programming habits, writing bug-free code will be much harder than it needs to be.
- Having a good set of habits and attitudes is possibly the most important requirement for consistently writing bug-free code
- Regularly clean up code
- *Don't allow unnecessary flexibility in functions*
- Don't welcome every free feature

** A Hypothetical Compiler
 - Enable all optional compiler warnings
 - Use lint to catch bugs that your compiler may miss
 - If you have unit tests, use them
 - The best way to eliminate bugs in your code is to find them as early  and as easily as possible.
 - Look for ways to catch bugs automatically with minimal effort.
 - Strive to reduce the amount of programmer skill neessary to catch bugs.
 - Optional compiler or lint warnings don't require any programmer skills to catch bugs.

** Assert Yourself
 - The compiler would catch just a small percentage of bugs
*** A Tale of Two Versions
*** Introducing Assert
*** "Undefined" means "Steer Clear"
*** The Code that cried Danger
*** Are you making assumptions again
*** Can the impossible happen?
*** The Silent Treatment
*** Two Algorithms are better than one
*** Stop bugs at the starting line
    - How can I automatically catch this bug at the earliest possible moment?
    - If you want to consistently write bug free code, you must grab the reins and take charge
    - You want to catch bugs at automatically at the earliest possible moment and without relying on the skills of others.
    - Use your best judgment
 - Maintain both ship and debug versions of your programs
 - Use assertions to validate function arguments
 - Strip undefined behaviour from your code, or use assertions to catch illegal uses of undefined behavior
 - Don't waste people's time. Document unclear assumptions
 - Either remove implicit assumptions, or assert that they are valid.
 - Use assertions to detect impossible conditions
 - Don't hide bugs , when you program defensively
 - Use a second algorithm to validate your results.
 - Don't wait for bugs to happen, use startup checks.
*** Assertions are forever

** Fortify your subsystems
    - gates, entry points
    - A subsystem hides its implementation details
    - Assertions are worthwhile, but you have to execute them if they are to report problems.
*** Now you see it, now you dont'
    - The key to exposing bugs is to eliminate random behavior wherever you find it.
    - You don't want to hide bugs
    - Use every opportunity, however remote, to automatically catch bugs
    - *Eliminate random behavior. Force bugs to be reproducible*
*** Shred your Garbage
    - Add debugging code to minimize the amount of random behavior
    - Add whatever debug code you feel is necessary to strengthen your app
    - *Design your garbage so that it's not misused*
*** Movers and Shakers
    - You don't want anything to happen rarely.
    - *If something happens rarely, force it to happen often*
    - There is no better way to catch bugs in code than to execute it and you want to execute ship code as much as possible
*** Keep a Journal to jog your memory
    - *Keep debug information to allow stronger error checking*
*** Don't wait for Bugs to Call
    - The Uncertainty Principle and other specters
    - *Create thorough subsystem checks and use them often*
*** It's Obvious Once you see it
    - Some choices are better than others
    - arbitrary choice
    - *Design your tests carefully. Nothing should be arbitrary*
*** There's no need to know
    - *Strive to implement transparent integrity checks*
    - The best tests are transparent, they work regardless of whether the programmer is aware of them.
*** You Don't Ship the Debug Version
    - An Historical Note
    - *Don't apply ship version constraints to the debug version. Trade size and speed for error detection*
*** Find Bugs Now, or Find Them Later
    - Without the need for luch or skill
    - Think twice before throwing out a validation test because it would be too slow or use too much memory
    - The best tests are those that require no knowledge of their existence
    - *Add assertions and validation checks to catch hard-to-spot and common bugs
    - How can I thoroughly validate this implementation?


** Step through your code
   - Code doesn't break spontaneously - something has to change for code to start breaking
   - probably be a waste of time
*** Gain Confidence in Your Code
   - The best way to catch bugs is to look for them the moment you write or change code.
   - Error handling code often has bugs in it because it is so rarely tested.
   - *Don't wait until you have a bug to step through your code*

*** A Fork in the Code
    - What about Sweeping changes?
    - Try hard to localize your changes
    - You cannot make sweeping changes without introducing any bugs
    - *Step through every code path*
    - simulating failures usually take much less time
    - 
*** Data Flow, the Lifeblood of Code
    - *As you step through code, focus on data flow*
    - Stepping through code helps to achieve the goal of catching bugs at the earliest possible moment.
    - Why Didn't the Compiler issue a warning?

*** Are you missing something?
    - Turn off optimizations
    - *Source level debuggers can hide execution details. Step through critical code at the instruction level.*
*** Try it - you will like it
    - Bugs don't grow in code spontaneously; they are the result of a programmer's writing new code or changing existing code

** Candy Machine Interfaces
   - A trivial difference in design can either cause bugs or prevent them
   - It is not enough that your functions be bug-free; they must also be safe to use.
   - a precise series of improbable events takes place and leads to disaster
   - *Make it hard to ignore error conditions*
   - *Don't bury error codes in return values*
*** Just a Little Extra Thought
    - *Always looks for, and eliminate flaws in your interfaces*
*** The One-Function Memory Manager
    - fairly arcane and behavior
    - To be fair, programmers don't usually sit down and think.
    - *Don't write multipurpose functions*
    - *Write separate functions to allow stronger argument valiation*
*** Wishy-Washy Inputs
    - Explicitness can be invaluable to maintenance programmers who have to read and understand code they didn't write
    - explicit inputs; explicit outputs
    - By silently accepting oddball values, you hide bugs rather than find them.
    - Keep the defensive code for robustness, but disallow the questionable inputs.
    - *Don't be wishy-washy*
    - *Define explicit function arguments*
*** Don't fail me now
    - *Write functions that, given valid inputs cannot fail*
*** Read between the lines
    - *Avoid using magic numbers in code*
    - *Make the code intelligibe at the point of call*
    - *Avoid boolean arguments*
*** Warn people of the hazards
    - *Write comments that emphasize potential hazards*
*** The Devil is in the Details
    - Hazards should be eliminated, not merely documented
    - Desinging bug-resistant interfaces is not difficult, but it does take some extra thought
      and a willingness to abandon ingrained coding habits.
    - *Make everything as clear and as obvious as possible*
    - Make it hard for programmers to unwittingly ignore details
    - Design but-resistant interfaces

    - 

** Risky Business
   - Programmers ignore risk
*** How LONG Is a long?
    - blind to the problems
    - well founded belief
    - Using portable data types
    - *Use well-defined data types*
*** Doth Your Data Run Over?
    - How obvious is the problem when you look at the code?
    - a hard bug to spot
    - Look at the data flow in a debugger
    - *Alwasy ask, "Can this variable or expression over-or underflow?"*
*** Close Counts only in Horseshoes
    - *Implement your designs as accurately as possible*
    - *Being kinda close is being kinda buggy*
*** Functions just "Doing their thing"
    - Strive to make every function perform it's task exactly one time
    - *You can break the rules, just be sure you have good reasons to*
    - Many times an if statement is the result of a sloppy implementation or design
    - *Implement the task just once*
*** No ifs, &&s or BUTS
    - *Get rid of extraneous if statements*
*** The ?: operator is an if statment too
    - *Avoid using nested ?: operators*
*** Rid your code of redundancy
    - *Handle your special cases just once*
*** High Risk, no return
    - For some programmers, the idea of tossing aside any possible efficiency gain seems almost criminal
    - It's not important that every line of code be optimally efficient. What is important is the overall effect
    - Systematically reduce risk by using safer designs
    - personal list of risky idioms to avoid
    - *Avoid risky language idioms*
    - Don't overestimate the cost
    - Worrying about local efficiency is rarely worthwhile
*** Inconsistency, The Gremlin of Code
    - *Don't needleslly mix operator types*
    - *If you mix operator types, use parentheses to isolate those operators*
    - Don't just be right - be obviously right so that nobody has to look it up
    - Don't Look it up
*** Don't associate with failures
    - *Avoid calling functions that return errors*
    - data-space vs code-space
    - Your job is to weight data-space against code-space and decide which is more important in each case you run across
*** Slap on the risk
    - Be faithful to your designs
    - The easiest way to introduce subtle bugs is to cheat on the implementation
    - *Programming is risky business*
    - The extra risk is rarely worth the trade-off
    - One of the golden rules in programming: *Never lose the user's data*

** Treacheries of the Trade
   - For some reason programmers resist writing code that is obvious and boring
   - Is it robust?
   - Is it solid?
   - A Thief with a key is still a thief
   - *Don't reference memory that you don't own*
*** A Thief with a key is still a thief
   - The Privileges of data
   - implied read and write privilege
   - *Don't reference memory that you have freed*
*** Take Only What you Need
   - Don't use output memory as workspace buffers
*** Keep Private things to yourself
   - It is not enough that functions work correctly; they must also prevent programmers from making obvious mistakes.
   - A Global problem
   - You risk introducing a bug
   - *Don't pass data in static (or global) memory*
*** Functional Leeches
   - either clever or gross
   - *Assertions keep programmers honest*
   - slimy implementation
   - *Don't write parasitic functions*
*** The Old Paint-Stirrer trick
   - convenient and guaranteed to work
   - *Don't abuse your programming language*
   - Standards change
   - fail to recognize
   - programmer's attitude
   - *Tight C does not guarantee efficient machine code*
*** No Hoity-Toity Programming
   - It's possible for efficient code to span multiple lines
   - Some programmers actually strive to write obscure code, thinking that it's impressive when it is merely unclear
   - You are not doing anybody a favor if you write correct, small code that nobody can understand
   - The amount of code your write is directly proportional to how well you understand the internal workings of the product
   - the other end of the spectrum
   - If you make your code easy to understand, novices should be able to maintain it without introducing bugs
   - Who does Maintenance Programming
   - *Write code for the "average" programmer*
*** Waste that bag of tricks
   - Maintainable code by definition => easy to understand and modify without introducing bugs
   - subtle side-effects
   - 2 audiences of programmers:
     - customers
     - maintenance programmers
   - Listen to your gut
   - *Write boring code*
   - *Keep those maintenance programmers in mind as you code*
   - shortcut fraught with dangers
   - Don't write code the way lawyers write contracts
   - If an average programmer can't read and understand your code, it's too complicated; use simpler language
   - *Avoid unnecessary overhead*

** The Rest is Attitude
  - The other necessary ingredient is a set of good habits and attitudes
  - bug-free code
  - buggy attitudes
  - If you have "buggy" attitudes or coding habits that cause bugs, you're going to have a tough time writing bug-free code.
*** For my Next Trick, Disappearing Bugs
  - *Bugs don't just "go away"*
  - Too Much Effort?
*** A Fix in Time Saves Nine
  - *Don't fix bugs later, fix them now*
*** Bug Doctor to the Rescue
  - *You can learn through your own hard experience, or you can learn from the costly mistakes of others*
  - All programmers seem to clean up code to some degree
  - *Fix the cause, not the symptom*
*** Are you a Code meddler?
  - If you see code that's obviously wrong or clearly unnecessary you should proceed with utmost caution
  - *Don't clean up code unless the clean-up is critical to the product's success*
*** Put "Cool" Features into cold storage
  - Don't write (or change) code if you don't have to
  - *Don't implement nonstrategic features*
*** There are no free lunches
  - Any noncritical feature is a potential source of bugs
  - not spent much time thinking about the true costs involved
  - *There are no free features*
*** Flexibility Breeds bugs
  - Strip unnecessary flexibility from your designs
  - You should keep a wary eye open for unduly flexible features
  - *Don't allow unnecessary flexibility*
  - Ported code is new code
*** "Try" is a four-letter word
  - More often than not, none of the things you're supposed to "try" is the proper course to pursue
  - *Don't keep "trying" solutions until you find one that works. Take the time to find the correct solution.*
  - ill-defined side-effects of code
  - If you find yourself testing possible solutions to a problem, stop yourself, pull out your manuals and read.
  - *Don't try, read*
*** The Sacred Schedule
  - *Write and test code in small chunks*
  - With rare exceptions, programmers who test code as they go have fewer bugs.
  - *Always test your code, even if that means your schedule will slip.*
*** What's in a Name?
  - Programmers should write and test each feature before moving on to the next
  - Testers cannot test your code bettern than you can
*** Duplication of Effort?
  - Unit tests => to verify that the subsystems interact properly
  - Programmers focus on code
  - Testers focus on features
  - *Don't rely on the testing group to find your bugs*
*** Testers Wear White Hats
  - *Don't blame testers for finding your bugs*
  - You should never expect testers to find bugs in your code
  - A bug may be minor, that it exists is serious.
  - *There are no silly bugs*
  - Silly bugs may be the side effects of serious problems
*** Establish Your priorities
  - Programming without a clear set of priorities is like going on a trip without knowing your destination
  - Walk through every code path, microscopically verifying all new code the moment it is written
  - Avoid the efficiency tricks
  - The code or the product?
  - *Establish your priorities and stick to them*
  - Gee, I Don't know
*** You Don't Get What You Don't Ask for
  - *Does this belief help or hinder my ability to write bug-free code?
  - Programmers with clear priorities know exactly why they chose a specific implementation and will rattle off the reasons if you ask
  - Bugs don't create themselves, nor do they fix themselves
  - It's easier to fix the symptom you've tracked down, but you should always make the effort to find the true cause
  - Remember that being flexible is not the same as being easy to use.
  - oddball implementation

** Where Do You Go From Here?
  - Nobody's list of guidelines will protect you from bugs
  - It's possible to write bug-free programs
  - You can come very close to writing bug-free programs, much close than the current norm, you just have to decide to do it.
  - It takes effort to keep bugs out of your code.
  - *Never allow the same bug to bite you twice*
  - *Reality*: You will never completely eliminate bugs, but you can increase the time between occurrences by constantly striving 
    to abolish every class of bug you encounter
